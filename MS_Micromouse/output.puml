@startuml





/' Objects '/

class MainWindow {
	+MainWindow(QWidget* parent)
	+~MainWindow()
	-{ : Maze m_currentMaze[]
	-{ : Maze m_currentMaze[]
	-m_algoGroup : QButtonGroup*
	-m_scene : QGraphicsScene*
	-m_spinnerMovie : QMovie*
	-ui : Ui::MainWindow*
	-m_engine : std::unique_ptr<SimulationEngine>
	-drawMaze(const Maze& maze) : void
	-drawRobot(int row, int col) : void
	-onAlgorithmChanged(int id) : void
	-onMapSliderChanged(int value) : void
	-onRestartClicked() : void
	-onSimulationFinished(double elapsedSec, int moves, bool reached) : void
	-onSpeedDialChanged(int value) : void
	-onStartClicked() : void
	-onStopClicked() : void
}


class Maze {
	+Maze(int width, int height)
	+getCell(int row, int col) : Cell& {query}
	+hasBottomWall(int row, int col) : bool {query}
	+hasLeftWall(int row, int col) : bool {query}
	+hasRightWall(int row, int col) : bool {query}
	+hasTopWall(int row, int col) : bool {query}
	+hasWall(int row, int col, Direction direction) : bool {query}
	+getHeight() : int {query}
	+getWidth() : int {query}
	-m_height : int
	-m_width : int
	-m_cells : std::vector<std::vector<Cell>>
	-carveMaze(int row, int col) : void
	+generate() : void
	-initCells() : void
}


class Robot {
	+Robot(int startRow, int startCol, Direction startDir, MovementAlgorithm algo, int goalRow, int goalCol)
	+~Robot()
	+getDirection() : Direction {query}
	-m_direction : Direction
	-m_algorithm : MovementAlgorithm
	+getAlgorithm() : int {query}
	+getCol() : int {query}
	+getRow() : int {query}
	-m_col : int
	-m_goalCol : int
	-m_goalRow : int
	-m_row : int
	-m_pathIndex : size_t
	-m_rotSonar : std::unique_ptr<RotatingUltrasonicSensor>
	-m_touchSensor : std::unique_ptr<TouchSensor>
	-m_path : std::vector<std::pair<int, int>>
	+move(const Maze& maze) : void
	-moveAStar(const Maze& maze) : void
	-moveFloodFill(const Maze& maze) : void
	-moveWithSensors(const Maze& maze) : void
	+setAlgorithm(MovementAlgorithm algo) : void
	-turnLeft() : void
	-turnRight() : void
}


class RotatingUltrasonicSensor {
	+RotatingUltrasonicSensor(int range)
	+detect(const Maze& maze, const Robot& robot) : bool
	+getDistance(Direction relativeDir) : int {query}
	-m_currentIndex : int
	-m_range : int
	-m_measurements : std::array<int, 3>
	+update(const Maze& maze, const Robot& robot) : void
}


abstract class Sensor {
	+Sensor()
	+~Sensor()
	+{abstract} detect(const Maze& maze, const Robot& robot) : bool
}


class SimulationEngine {
	+SimulationEngine(QObject* parent)
	-m_elapsed : QElapsedTimer
	-m_timer : QTimer
	-m_algo : Robot::MovementAlgorithm
	-m_mapSize : int
	-m_maxMoves : int
	-m_moveCount : int
	+mazeChanged(const Maze& maze) : signals : void
	-m_maze : std::unique_ptr<Maze>
	-m_robot : std::unique_ptr<Robot>
	-onTimeout() : void
	+robotMoved(int row, int col) : void
	+setAlgorithm(Robot::MovementAlgorithm algo) : void
	+setMapSize(int size) : void
	+simulationFinished(double elapsedSec, int moves, bool reachedCenter) : void
	+start(int speedMultiplier) : void
	+stop() : void
}


class TouchSensor {
	+detect(const Maze& maze, const Robot& robot) : bool
}


class UltrasonicSensor {
	+UltrasonicSensor(int range, Direction direction)
	-m_direction : Direction
	+detect(const Maze& maze, const Robot& robot) : bool
	-m_range : int
}


enum Direction {
	Down
	Left
	Right
	Up
}


enum Robot::MovementAlgorithm {
	AStar
	FloodFill
	Sensors
}


class Cell {
	+bottomWall : bool
	+leftWall : bool
	+rightWall : bool
	+topWall : bool
	+visited : bool
	+col : int
	+row : int
}





/' Inheritance relationships '/

Sensor <|-- RotatingUltrasonicSensor


Sensor <|-- TouchSensor


Sensor <|-- UltrasonicSensor





/' Aggregation relationships '/

MainWindow o-- MainWindow


MainWindow "2" *-- Maze


MainWindow o-- SimulationEngine


Maze *-- Cell


Robot *-- Direction


Robot o-- RotatingUltrasonicSensor


Robot o-- TouchSensor


SimulationEngine o-- Maze


SimulationEngine o-- Robot


UltrasonicSensor *-- Direction






/' Nested objects '/

Robot +-- Robot::MovementAlgorithm




@enduml
